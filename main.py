from fastapi import FastAPI, Request
import httpx
import os

app = FastAPI()

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = os.getenv("GROUP_ID")
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å (—Å–ª–µ—Ç–∞–µ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ, –Ω–æ –Ω–æ—Ä–º –¥–ª—è —Å—Ç–∞—Ä—Ç–∞)
user_states = {}
user_data = {}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()

    if "message" in data:
        message = data["message"]
        chat_id = message["chat"]["id"]
        text = message.get("text", "")

        if text == "/start":
            await send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É.\n\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            user_states[chat_id] = "waiting_name"
            user_data[chat_id] = {}
        else:
            await handle_step(chat_id, text)

    elif "callback_query" in data:
        callback = data["callback_query"]
        chat_id = callback["from"]["id"]
        tariff = callback["data"]
        user_data[chat_id]["tariff"] = tariff
        await send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
        msg = format_application(user_data[chat_id])
        await send_message(GROUP_ID, msg)

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_states.pop(chat_id, None)
        user_data.pop(chat_id, None)

    return {"ok": True}

async def handle_step(chat_id, text):
    state = user_states.get(chat_id)

    if state == "waiting_name":
        user_data[chat_id]["name"] = text
        user_states[chat_id] = "waiting_phone"
        await send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    elif state == "waiting_phone":
        user_data[chat_id]["phone"] = text
        user_states[chat_id] = "waiting_company"
        await send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    elif state == "waiting_company":
        user_data[chat_id]["company"] = text
        user_states[chat_id] = "waiting_tariff"
        await send_tariff_buttons(chat_id)
    else:
        await send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

async def send_tariff_buttons(chat_id):
    keyboard = {
        "inline_keyboard": [
            [{"text": "üü¢ –°—Ç–∞—Ä—Ç", "callback_data": "–°—Ç–∞—Ä—Ç"}],
            [{"text": "üîµ –ë–∏–∑–Ω–µ—Å", "callback_data": "–ë–∏–∑–Ω–µ—Å"}],
            [{"text": "üî¥ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π", "callback_data": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π"}]
        ]
    }

    async with httpx.AsyncClient() as client:
        await client.post(f"{API_URL}/sendMessage", json={
            "chat_id": chat_id,
            "text": "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ:",
            "reply_markup": keyboard
        })

def format_application(data):
    return (
        "üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data.get('company')}\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {data.get('tariff')}"
    )

async def send_message(chat_id, text):
    async with httpx.AsyncClient() as client:
        await client.post(f"{API_URL}/sendMessage", json={
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "Markdown"
        })

@app.get("/")
def root():
    return {"status": "ok"}
