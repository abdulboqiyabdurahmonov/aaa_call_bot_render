import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters,
    ConversationHandler
)
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # —Å—é–¥–∞ —É–∫–∞–∂–µ—à—å ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ª–∏—á–∫–∏

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
FIO, PHONE, COMPANY, TARIFF = range(4)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    [["–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]],
    resize_keyboard=True
)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç TRIPLEA.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
        reply_markup=main_keyboard
    )

# Help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∞\n"
        "/chatid ‚Äî —É–∑–Ω–∞—Ç—å ID —á–∞—Ç–∞"
    )

# /chatid ‚Äî —É–∑–Ω–∞—Ç—å ID
async def chat_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"üîç Chat ID: `{chat_id}`", parse_mode="Markdown")

# –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∑–∞—è–≤–∫–∏
async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û:")
    return FIO

async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["fio"] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?")
    return COMPANY

async def get_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["company"] = update.message.text
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ: —Å—Ç–∞—Ä—Ç, –±–∏–∑–Ω–µ—Å –∏–ª–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π"
    )
    return TARIFF

async def get_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tariff"] = update.message.text

    text = (
        "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n"
        f"üë§ –§–ò–û: {context.user_data['fio']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {context.user_data['company']}\n"
        f"üíº –¢–∞—Ä–∏—Ñ: {context.user_data['tariff']}"
    )

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    if ADMIN_CHAT_ID:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
    else:
        await update.message.reply_text("‚ùó ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω.")

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_keyboard)
    return ConversationHandler.END

# –ú–µ–Ω—é
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–∑–∞—è–≤–∫—É" in text:
        return await start_application(update, context)
    elif "–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" in text:
        await update.message.reply_text("–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä üë®‚Äçüíº")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é ‚¨á")

# –°–±–æ—Ä–∫–∞
app = ApplicationBuilder().token(BOT_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^(–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É)$"), start_application)],
    states={
        FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_company)],
        TARIFF: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_tariff)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("cancel", cancel))
app.add_handler(CommandHandler("chatid", chat_id_command))
app.add_handler(conv_handler)
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()

