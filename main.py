import os
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID", "-1002344973979"))
WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://triplea-bot-web.onrender.com")
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# FSM –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    fio = State()
    phone = State()
    company = State()
    tariff = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
tariffs = {
    "–°—Ç–∞—Ä—Ç": "750 —Å—É–º/–∑–≤–æ–Ω–æ–∫ ‚Äî –±–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
    "–ë–∏–∑–Ω–µ—Å": "600 —Å—É–º/–∑–≤–æ–Ω–æ–∫ ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ + API –¥–æ—Å—Ç—É–ø",
    "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π": "450 —Å—É–º/–∑–≤–æ–Ω–æ–∫ ‚Äî –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç + –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
}

tariff_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=name)] for name in tariffs],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(F.command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(Form.fio)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())

@dp.message(Form.fio)
async def process_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await state.set_state(Form.phone)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(Form.company)
    await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")

@dp.message(Form.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await state.set_state(Form.tariff)
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariff_keyboard)

@dp.message(Form.tariff, F.text.in_(tariffs.keys()))
async def process_tariff(message: types.Message, state: FSMContext):
    choice = message.text
    await state.update_data(tariff=choice)
    data = await state.get_data()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        "üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram-–±–æ—Ç–∞</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {data['fio']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {data['company']}\n"
        f"üíº <b>–¢–∞—Ä–∏—Ñ:</b> {data['tariff']} ‚Äî {tariffs[data['tariff']]}\n"
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
    await bot.send_message(chat_id=GROUP_ID, text=text)
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@dp.message(F.text.lower().in_({"–æ—Ç–º–µ–Ω–∏—Ç—å", "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å"}))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

@dp.message(F.text.lower().in_({"–Ω–∞–∑–∞–¥", "üîô –Ω–∞–∑–∞–¥"}))
async def go_back(message: types.Message, state: FSMContext):
    current = await state.get_state()
    if current == Form.phone.state:
        await state.set_state(Form.fio)
        await message.answer("üîô –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    elif current == Form.company.state:
        await state.set_state(Form.phone)
        await message.answer("üîô –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    elif current == Form.tariff.state:
        await state.set_state(Form.company)
        await message.answer("üîô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    else:
        await message.answer("‚è™ –ù–∞–∑–∞–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

@dp.message(F.command("help"))
async def cmd_help(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.")

# Webhook setup
async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()
    await storage.close()
    await storage.wait_closed()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω, –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def create_app() -> web.Application:
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot, on_startup=on_startup, on_shutdown=on_shutdown)
    return app

if __name__ == "__main__":
    app = create_app()
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
