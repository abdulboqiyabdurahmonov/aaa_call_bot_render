import os
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID", "-1002344973979"))

WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = "supersecret"
WEBHOOK_HOST = "https://triplea-bot-web.onrender.com"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    fio = State()
    phone = State()
    company = State()
    tariff = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
tariff_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°—Ç–∞—Ä—Ç")],
        [KeyboardButton(text="–ë–∏–∑–Ω–µ—Å")],
        [KeyboardButton(text="–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

tariff_descriptions = {
    "–°—Ç–∞—Ä—Ç": "üîπ 750 —Å—É–º/–∑–≤–æ–Ω–æ–∫\n–í–∫–ª—é—á–∞–µ—Ç: –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å, –∞–Ω–∞–ª–∏—Ç–∏–∫—É, –ø–æ–¥–¥–µ—Ä–∂–∫—É, –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
    "–ë–∏–∑–Ω–µ—Å": "üî∏ 600 —Å—É–º/–∑–≤–æ–Ω–æ–∫\n–í–∫–ª—é—á–∞–µ—Ç: –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å, –∞–Ω–∞–ª–∏—Ç–∏–∫—É, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–¥–¥–µ—Ä–∂–∫—É",
    "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π": "üî∂ 450 —Å—É–º/–∑–≤–æ–Ω–æ–∫\n–í–∫–ª—é—á–∞–µ—Ç: –≤—Å—ë, —á—Ç–æ –≤ –ë–∏–∑–Ω–µ—Å + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ API"
}

@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b>:")
    await state.set_state(Form.fio)

@dp.message(Form.fio)
async def process_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:")
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b>:")
    await state.set_state(Form.company)

@dp.message(Form.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ <b>—Ç–∞—Ä–∏—Ñ</b>:", reply_markup=tariff_keyboard)
    await state.set_state(Form.tariff)

@dp.message(Form.tariff)
async def process_tariff(message: types.Message, state: FSMContext):
    tariff = message.text
    if tariff not in tariff_descriptions:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=tariff_keyboard)
        return

    await state.update_data(tariff=tariff)
    data = await state.get_data()

    text = (
        "üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üë§ –ò–º—è: {data['fio']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        f"üíº –¢–∞—Ä–∏—Ñ: {data['tariff']}\n"
        f"‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {tariff_descriptions[tariff]}"
    )

    await bot.send_message(GROUP_ID, text)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    await state.clear()

# Webhook –∏ –∑–∞–ø—É—Å–∫
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL, secret_token=WEBHOOK_SECRET)

app = web.Application()
dp.workflow_data["bot"] = bot
setup_application(app, dp, bot=bot, secret_token=WEBHOOK_SECRET)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=10000)
