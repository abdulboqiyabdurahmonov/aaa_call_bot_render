import logging
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_CHAT_ID = os.getenv("MANAGER_CHAT_ID")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –≠—Ç–∞–ø—ã —Å–æ–±—Ä–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
FIO, PHONE, COMPANY, TARIFF = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=reply_markup
    )

async def contact_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("\u041d\u0430\u0448 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0441\u0432\u044f\u0436\u0435\u0442\u0441\u044f \u0441 \u0432\u0430\u043c\u0438 \u0432 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f.")

async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:")
    return FIO

async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['fio'] = update.message.text
    await update.message.reply_text("üì± –¢–µ–ø–µ—Ä—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("üè¢ –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è:")
    return COMPANY

async def get_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['company'] = update.message.text
    await update.message.reply_text("üìà –¢–∞—Ä–∏—Ñ: \n1. –°—Ç–∞—Ä—Ç \n2. –ë–∏–∑–Ω–µ—Å \n3. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π\n
üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤:")
    return TARIFF

async def get_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['tariff'] = update.message.text
    text = (
        f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –§–ò–û: {context.user_data['fio']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {context.user_data['company']}\n"
        f"üìà –¢–∞—Ä–∏—Ñ: {context.user_data['tariff']}"
    )
    await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=text)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^\–û\—Å\—Ç\–∞\–≤\–∏\—Ç\—å \–∑\–∞\—è\–≤\–∫\—É$"), start_application)],
        states={
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_company)],
            TARIFF: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_tariff)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("–æ—Ç–º–µ–Ω–∏—Ç—å", cancel), CommandHandler("–Ω–∞–∑–∞–¥", start)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–æ—Ç–º–µ–Ω–∏—Ç—å", cancel))
    app.add_handler(CommandHandler("–Ω–∞–∑–∞–¥", start))
    app.add_handler(MessageHandler(filters.Regex("^\–°\–≤\—è\–∑\–∞\—Ç\—å\—Å\—è \—Å \–º\–µ\–Ω\–µ\–¥\–∂\–µ\—Ä\–æ\–º$"), contact_manager))
    app.add_handler(conv_handler)

    app.run_polling()
