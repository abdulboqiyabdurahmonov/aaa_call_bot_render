
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

BOT_TOKEN = os.getenv("7993696802:AAHsaOyLkComr4mr2WsC-EgnB5jcHKjd7Ho")
OWNER_ID = os.getenv("349680069")
MANAGER_CHAT_ID = os.getenv("557891018")
PORT = int(os.environ.get("PORT", 10000))
HOSTNAME = os.getenv("aaa_call_bot_rende")

TYPING_NAME, TYPING_PHONE, TYPING_COMPANY, CHOOSING_PLAN = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=reply_markup
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        await update.message.reply_text("–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        return ConversationHandler.END
    elif text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return TYPING_NAME
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return TYPING_PHONE

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    return TYPING_COMPANY

async def handle_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["company"] = update.message.text
    reply_markup = ReplyKeyboardMarkup([["–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π"]], resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ:", reply_markup=reply_markup)
    return CHOOSING_PLAN

async def handle_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plan = update.message.text
    context.user_data["plan"] = plan
    data = context.user_data

    tariff_info = {
        "–°—Ç–∞—Ä—Ç": "–î–æ 1 000 –∑–≤–æ–Ω–∫–æ–≤ –≤ –º–µ—Å—è—Ü\n1 –≥–æ–ª–æ—Å–æ–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ Telegram\n–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫\n900 000 —Å—É–º / –º–µ—Å",
        "–ë–∏–∑–Ω–µ—Å": "–î–æ 10 000 –∑–≤–æ–Ω–∫–æ–≤ –≤ –º–µ—Å—è—Ü\n–î–æ 5 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram-–±–æ—Ç–æ–º\n8 100 000 —Å—É–º / –º–µ—Å",
        "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π": "–î–æ 100 000 –∑–≤–æ–Ω–∫–æ–≤ –≤ –º–µ—Å—è—Ü\n–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏\nAPI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, CRM\n–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä\n72 900 000 —Å—É–º / –º–µ—Å"
    }

    msg = f"\U0001F4E5 –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\U0001F464 –§–ò–û: {data['name']}\n\U0001F4DE –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\U0001F3E2 –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n\U0001F4E6 –¢–∞—Ä–∏—Ñ: {plan}\n\U0001F4C4 –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {tariff_info.get(plan, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ')}"
    await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=msg)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text)],
        states={
            TYPING_NAME: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_name)],
            TYPING_PHONE: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_phone)],
            TYPING_COMPANY: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_company)],
            CHOOSING_PLAN: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_plan)],
        },
        fallbacks=[
            CommandHandler("–æ—Ç–º–µ–Ω–∏—Ç—å", cancel),
            CommandHandler("–Ω–∞–∑–∞–¥", back),
            CommandHandler("start", start)
        ],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=f"https://{HOSTNAME}/"
    )

if __name__ == "__main__":
    main()

