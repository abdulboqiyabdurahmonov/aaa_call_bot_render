
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7993696802:AAHsaOyLkComr4mr2WsC-EgnB5jcHKjd7Ho"
WEBHOOK_URL = "https://aaa-call-bot-render.onrender.com/webhook"

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)

# === –°–õ–£–ñ–ï–ë–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
user_data = {}

# === –ö–û–ú–ê–ù–î–ê /START ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="request"),
            InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=reply_markup)

# === –ö–ù–û–ü–ö–ò ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "request":
        user_data[query.from_user.id] = {}
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        context.user_data["step"] = "fio"

    elif query.data == "contact":
        await query.message.reply_text("–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# === –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")
    uid = update.message.from_user.id
    text = update.message.text

    if step == "fio":
        user_data[uid]["fio"] = text
        context.user_data["step"] = "phone"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    elif step == "phone":
        user_data[uid]["phone"] = text
        context.user_data["step"] = "company"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")

    elif step == "company":
        user_data[uid]["company"] = text
        context.user_data["step"] = "tariff"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ (–°—Ç–∞—Ä—Ç, –ë–∏–∑–Ω–µ—Å, –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π):")

    elif step == "tariff":
        user_data[uid]["tariff"] = text
        context.user_data["step"] = None

        msg = (
            "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n"
            f"üë§ –§–ò–û: {user_data[uid]['fio']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[uid]['phone']}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_data[uid]['company']}\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: {user_data[uid]['tariff']}"
        )

        MANAGER_ID = 557891018  # –ü–æ–¥—Å—Ç–∞–≤—å –Ω—É–∂–Ω—ã–π ID
        await context.bot.send_message(chat_id=MANAGER_ID, text=msg)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ /start.")

# === –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        webhook_url=WEBHOOK_URL,
    )

if __name__ == "__main__":
    main()
    git add bot.py
git commit -m "Switch to webhook version"
git push


