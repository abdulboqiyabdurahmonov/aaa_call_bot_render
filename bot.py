
import logging
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_CHAT_ID = os.getenv("MANAGER_CHAT_ID")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ASK_NAME, ASK_PHONE, ASK_COMPANY, ASK_TARIFF = range(4)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return ASK_NAME

    elif text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        await update.message.reply_text("–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        return ConversationHandler.END

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return ConversationHandler.END

# –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return ASK_PHONE

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    return ASK_COMPANY

async def ask_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["company"] = update.message.text
    await update.message.reply_text(
        "üìë –¢–∞—Ä–∏—Ñ—ã:
"
        "1. –°—Ç–∞—Ä—Ç ‚Äî –î–æ 1 000 –∑–≤–æ–Ω–∫–æ–≤ –≤ –º–µ—Å—è—Ü, 1 —Å—Ü–µ–Ω–∞—Ä–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ Telegram, –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫.
"
        "2. –ë–∏–∑–Ω–µ—Å ‚Äî –î–æ 10 000 –∑–≤–æ–Ω–∫–æ–≤, 5 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º.
"
        "3. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π ‚Äî –î–æ 100 000 –∑–≤–æ–Ω–∫–æ–≤, –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, API/CRM, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.
"
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ (–°—Ç–∞—Ä—Ç / –ë–∏–∑–Ω–µ—Å / –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π):"
    )
    return ASK_TARIFF

async def ask_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tariff"] = update.message.text
    user = update.effective_user

    message = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username or '–ë–µ–∑ –Ω–∏–∫–∞'} (ID: {user.id}):\n"
        f"üë§ –§–ò–û: {context.user_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {context.user_data['company']}\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {context.user_data['tariff']}"
    )

    await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=message)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –∏ –Ω–∞–∑–∞–¥
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            ASK_COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_company)],
            ASK_TARIFF: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_tariff)],
        },
        fallbacks=[CommandHandler("–æ—Ç–º–µ–Ω–∏—Ç—å", cancel), CommandHandler("–Ω–∞–∑–∞–¥", start)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("–Ω–∞–∑–∞–¥", start))
    app.add_handler(CommandHandler("–æ—Ç–º–µ–Ω–∏—Ç—å", cancel))

    app.run_polling()

if __name__ == "__main__":
    main()
