import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, CommandStart

API_TOKEN = '7993696802:AAHsaOyLkComr4mr2WsC-EgnB5jcHKjd7Ho'
GROUP_ID = -1002344973979

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –®–∞–≥–∏
class Form(StatesGroup):
    fio = State()
    phone = State()
    company = State()
    tariff = State()

# –ö–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
tariff_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –°—Ç–∞—Ä—Ç ‚Äî 750 —Å—É–º/–∑–≤–æ–Ω–æ–∫")],
        [KeyboardButton(text="üíº –ë–∏–∑–Ω–µ—Å ‚Äî 600 —Å—É–º/–∑–≤–æ–Ω–æ–∫")],
        [KeyboardButton(text="üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π ‚Äî 450 —Å—É–º/–∑–≤–æ–Ω–æ–∫")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ],
    resize_keyboard=True
)

# –°—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–±–µ—Ä–µ–º —Ç–≤–æ—é –∑–∞—è–≤–∫—É. –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –§–ò–û:")
    await state.set_state(Form.fio)

# –û—Ç–º–µ–Ω–∞
@dp.message(F.text.lower().in_({"‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å", "/–æ—Ç–º–µ–Ω–∏—Ç—å"}))
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())

# –ù–∞–∑–∞–¥
@dp.message(F.text.lower().in_({"üîô –Ω–∞–∑–∞–¥", "/–Ω–∞–∑–∞–¥"}))
async def go_back(message: Message, state: FSMContext):
    current = await state.get_state()
    if current == Form.phone:
        await state.set_state(Form.fio)
        await message.answer("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    elif current == Form.company:
        await state.set_state(Form.phone)
        await message.answer("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    elif current == Form.tariff:
        await state.set_state(Form.company)
        await message.answer("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    else:
        await message.answer("‚è™ –ù–∞–∑–∞–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

# –§–ò–û
@dp.message(Form.fio)
async def process_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await state.set_state(Form.phone)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –¢–µ–ª–µ—Ñ–æ–Ω
@dp.message(Form.phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(Form.company)
    await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")

# –ö–æ–º–ø–∞–Ω–∏—è
@dp.message(Form.company)
async def process_company(message: Message, state: FSMContext):
    await state.update_data(company=message.text)
    await state.set_state(Form.tariff)
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ:", reply_markup=tariff_keyboard)

# –¢–∞—Ä–∏—Ñ
@dp.message(Form.tariff)
async def process_tariff(message: Message, state: FSMContext):
    tariff = message.text
    await state.update_data(tariff=tariff)
    data = await state.get_data()

    text = (
        "üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram-–±–æ—Ç–∞</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {data['fio']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {data['company']}\n"
        f"üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> {data['tariff']}\n"
    )

    await bot.send_message(chat_id=GROUP_ID, text=text)
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
