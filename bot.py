import logging
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_CHAT_ID = os.getenv("MANAGER_CHAT_ID")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
NAME, PHONE, COMPANY, TARIFF = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=reply_markup
    )

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return NAME
    elif text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        await update.message.reply_text("–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

async def collect_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def collect_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    return COMPANY

async def collect_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["company"] = update.message.text
    await update.message.reply_text(
        "üì¶ –¢–∞—Ä–∏—Ñ—ã: \n"
        "1Ô∏è‚É£ –°—Ç–∞—Ä—Ç ‚Äî 900 000 —Å—É–º/–º–µ—Å\n"
        "   –î–æ 1 000 –∑–≤–æ–Ω–∫–æ–≤, 1 —Å—Ü–µ–Ω–∞—Ä–∏–π, Telegram-–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "2Ô∏è‚É£ –ë–∏–∑–Ω–µ—Å ‚Äî 8 100 000 —Å—É–º/–º–µ—Å\n"
        "   –î–æ 10 000 –∑–≤–æ–Ω–∫–æ–≤, 5 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, Telegram-–±–æ—Ç\n\n"
        "3Ô∏è‚É£ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π ‚Äî 72 900 000 —Å—É–º/–º–µ—Å\n"
        "   –î–æ 100 000 –∑–≤–æ–Ω–∫–æ–≤, API, CRM, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä\n\n"
        "–ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    )
    return TARIFF

async def collect_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tariff"] = update.message.text

    message = (
        "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {context.user_data['company']}\n"
        f"üíº –¢–∞—Ä–∏—Ñ: {context.user_data['tariff']}"
    )

    await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=message)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & (~filters.COMMAND), handle_choice)],
        states={
            NAME: [MessageHandler(filters.TEXT & (~filters.COMMAND), collect_name)],
            PHONE: [MessageHandler(filters.TEXT & (~filters.COMMAND), collect_phone)],
            COMPANY: [MessageHandler(filters.TEXT & (~filters.COMMAND), collect_company)],
            TARIFF: [MessageHandler(filters.TEXT & (~filters.COMMAND), collect_tariff)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CommandHandler("back", back),
        ],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()
